syntax = "proto3";

package api;

// Api service is a provider of various lambda services
service Api {
    // Email service sends email
    rpc Email(EmailRequest) returns (EmailResponse) {}
    // InferImage applies trained model on input image for inferring labels
    rpc InferImage(stream InferImageRequest) returns (InferImageResponse) {}
}

// EmailRequest is the request to send email. This data is streamed from client
// to the server.
message EmailRequest {
    string to_email = 1;
    string to_name = 2;
    string from_email = 3;
    string from_name = 4;
    string subject = 5;
    bytes body = 6;
}

// SendResponse is the response from the server after email is sent.
message EmailResponse {
    int64 status_code = 1;
    string body = 2;
    map<string, ListOfString> headers = 3;
}

// ListOfString is a list of strings
message ListOfString {
    repeated string value = 1;
}

// InferImageRequest takes a list of images (as bytes) and model and label file path URIs.
message InferImageRequest {
    // List of images
    repeated Image images = 1;
    // Path to model pb file
    string model_path = 2;
    // Path to label file
    string label_path = 3;
}

// Image consists of a name and bytes
message Image {
    string name = 1;
    bytes data = 2;
}

// InferImageResponse is a list of output, one per input image.
message InferImageResponse {
    repeated InferOutput outputs = 1;
}

// InferOutput consists of a name, inferred label and probability for that label.
message InferOutput {
    string name = 1;
    string label = 2;
    int64 probability = 3;
}